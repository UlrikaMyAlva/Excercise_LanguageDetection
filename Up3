#include <string>
#include <cctype>
#include <iostream>
#include <fstream>
#include <cmath>
/*
FRÅGOR:
1. Varför tror du vi rekommenderar att ladda hem en liten fil till att börja med?
- Programmering handlar om att bryta ner program i mindre bitar. Genom att börja
med ett litet eller ett enklare problem,
är det lättare att undersöka om grunden fungerar innan man går vidare till svårare
problem. Börjar man med svåra problem direkt
kan det vara så att man inte förstår varför koden inte fungerar, och inte kunna
komma fram till hur man ska lösa det.
2. Hur skulle man gå tillväga för att kunna ta med bokstäverna å, ä och ö?
- Varje bokstav representeras av en siffra (ASCII). Kanske går det att konvertera
bokstäverna till dessa siffror, och där kolla
efter siffrorna som representerar å, ä, ö (Å, Ä, Ö). Dock finns inte å, ä och ö i
ASCII så man kan behöva inkludera ett annat
bibliotek eller ändra det lokala språket.
*/
using namespace std;
// Globala konstanter:
const int ANTAL_BOKSTAVER = 26; //A-Z
const int ANTAL_SPRAK = 4;
const double TOLK_HJALP[ANTAL_SPRAK][ANTAL_BOKSTAVER]=
 {{8.27,1.48,2.94,4.03,11.78,2.22,1.72,6.77, //engelska
 7.39,0.12,0.81,3.76,2.85,6.71,7.79,1.54,
 0.05,5.95,6.69,9.07,2.66,1.13,2.14,0.19,
 1.89,0.03},
 {7.97,1.40,3.55,3.79,16.89,1.02,1.00,0.75, //franska
 7.08,0.38,0.04,5.51,2.82,8.11,5.19,2.78,
 1.01,6.69,8.35,7.22,6.09,1.35,0.02,0.54,
 0.30,0.15},
 {9.50,1.11,1.53,5.30,8.94,1.74,3.57,3.94, //svenska
 3.98,0.89,3.26,4.93,3.41,8.46,5.01,1.77,
 0.00,6.73,5.56,9.20,1.94,2.42,0.00,0.05,
 0.45,0.00},
 {5.12,1.95,3.57,5.07,16.87,1.35,3.00,5.79, //tyska
 8.63,0.19,1.14,3.68,3.12,10.64,1.74,0.42,
 0.01,6.30,6.99,5.19,3.92,0.77,1.79,0.01,
 0.69,1.24}};
//--------------------------------------------------------
// Funktionsdeklarationer:
//Beräknar hur många av varje bokstav
double berakna_histogram_abs(string mening, double meningArray[]);
//Räknar ut procenten bokstäverna representerar i texten.
double abs_till_rel(double meningArray[], string mening, double procentArray[]);
//Skiver ut en tabell där varje procent representeras av två stjärnor (**)
void plotta_histogram_rel(double procentArray[]);
//Tolkar vilket språk texten är på
void tolkning(double procentArray[]);
//Kollar om namnet på filen har .txt på slutet, och lägger annars till det
string namn_pa_fil();
//Läser in den inskrivna filen. Om filen inte existerar stängs programmet av.
string inlasning(string filnamn);
//--------------------------------------------------------
// Huvudprogram:
int main()
{
 //Deklaration av variabler
 double meningArray[ANTAL_BOKSTAVER];
 double procentArray[ANTAL_BOKSTAVER];
 string filnamn;
 string filtext;
 //Namnet på filen sparas i finamn.
 filnamn = namn_pa_fil();
 //Texten i filen sparas i strängen filtext. Filnamet ovan skickas till metoden
inläsning och returnar hela texten.
 filtext = inlasning(filnamn);
 //Hur många av varja bokstav sparas i meningArray[].
 meningArray [ANTAL_BOKSTAVER] = berakna_histogram_abs(filtext, meningArray);
 //Antal procent av varje bokstav sparas i procentArray[].
 procentArray [ANTAL_BOKSTAVER] = abs_till_rel(meningArray, filtext,
procentArray);
 //Procenten skickas till tolkning, som tolkar vilket språk det är.
 tolkning(procentArray);
 //Tabell med stjärnor skrivs ut.
 plotta_histogram_rel(procentArray);
 return 0;
}
//--------------------------------------------------------
// Funktionsdefinitioner:
double berakna_histogram_abs(string mening, double meningArray[]) {
 int letter = 0;
 //Arrayen variabler sätts till 0.
 for (int i=0; i < ANTAL_BOKSTAVER; i++)
 meningArray[i] = 0;
 //Små och stora bokstäver sorteras in. Antalet bokstäver räknas.
 for (int i=0; i< (int) mening.length(); i++) {
 int index;
 if (mening.at(i)>='a' && mening.at(i)<='z'){
 index = mening.at(i) - 'a';
 meningArray[index]++;
 letter++;
 }
 if (mening.at(i)>='A' && mening.at(i)<='Z'){
 index = mening.at(i) - 'A';
 meningArray[index]++;
 letter++;
 }
 }
//
// for (int i= 0; i < ANTAL_BOKSTAVER; i++){
// cout << "Varje bokstav: " << meningArray[i] << endl;
// }
 cout << "\nResultat f\x94r bokst\x84verna A-Z: \n" << letter << endl;
 return meningArray[ANTAL_BOKSTAVER];
}
double abs_till_rel(double meningArray[], string mening, double procentArray[]) {
 double procent;
 int letter = 0;
 for (int i=0; i< (int) mening.length(); i++) {
 int index;
 if (mening.at(i)>='a' && mening.at(i)<='z'){
 letter++;
 }
 if (mening.at(i)>='A' && mening.at(i)<='Z'){
 letter++;
 }
 }
 for (int i=0; i<ANTAL_BOKSTAVER; i++) {
 char bokstav = char (i+'A');
 procent = (meningArray[i] / letter * 100); //multipliceras med 100 för att
få procent.
 procentArray[i] = procent;
 //Skriver ut procent, kan tas med om man vill se
 //cout << bokstav << ": " << procentArray[i] << "%" << endl;
 }
 cout << "\n";
 return procentArray[ANTAL_BOKSTAVER];
}
void plotta_histogram_rel(double procent[]) {
 cout << "\nTabell" << endl;
 double svar = 0.0;
 int avrundat;
 for (int i=0; i<ANTAL_BOKSTAVER; i++) {
 char bokstav = char (i+'A');
 cout << "\n" << bokstav << ": ";
 svar = (procent[i] / 0.5) - 0.5; //Avrundas genom -0.5
 for (int j = 0; j < svar; j++){
 cout << "*";
 }
 }
 cout << "\n\n";
}
void tolkning (double procentArray[]) {
 int resultat = 0;
 int minsta = 10000; //Hög siffra för att alltid vara större i nedan if sats.
 int sprak;
 double skillnad;
 double sum = 0.0;
 string spraken [] = {"Engelska", "Franska", "Svenska", "Tyska"};
 cout <<"Spr\x86k: \n"<< endl;
 for (int i = 0; i < ANTAL_SPRAK; i++) {
 for (int j=0; j<ANTAL_BOKSTAVER; j++)
 {
 skillnad=TOLK_HJALP[i][j]- procentArray[j];
 sum = sum + skillnad*skillnad;
 }
 cout << spraken[i] << ": " << sum << endl;
 if (sum < minsta) {
 minsta = sum;
 sprak = i + 1;
 }
 sum = 0;
 }
 switch (sprak) {
 case 1:
 cout << "\nSpr\x86ket \x84r troligtvis Engelska.\n";
 break;
 case 2:
 cout << "\nSpr\x86ket \x84r troligtvis Franska.\n";
 break;
 case 3:
 cout << "\nSpr\x86ket \x84r troligtvis Svenska.\n";
 break;
 case 4:
 cout << "\nSpr\x86ket \x84r troligtvis Tyska.\n";
 break;
 }
}
string namn_pa_fil(){
 string filnamn;
 bool exit = true;
 while (exit) {
 cout << "Please enter name of your file: " << endl;
 getline(cin, filnamn);
 string reversed = filnamn;
 string txt = ".txt";
 //filnamet omvänds, sedan kollas om de fyra första elementen är "txt.". Om
txt ej är där läggs det till.
 int size = reversed.length();
 int n = size-1;
 for(int i=0; i < (size/2);i++){
 swap(reversed[i],reversed[n]);
 n = n-1;
 }
 if (reversed[0] == 't'&& reversed[1] == 'x' && reversed[2] == 't' &&
reversed[3] == '.') {
 cout << "This is a valid file" << endl;
 exit = false;
 }
 else{
 filnamn = filnamn + txt;
 exit = false;
 }
 }
 cout << filnamn << endl;
 return filnamn;
}
string inlasning(string filnamn) {
string textFil;
string fulltext;
ifstream fil(filnamn);
if (fil.fail()) {
 cout << "Filen existerar ej, programmet avslutas" << endl;
 exit(0);
}
while (getline (fil, textFil)) {
 fulltext += textFil; //Filen läses in för varje line
}
return fulltext;
//Filen stängs
fil.close();
}
